#!/usr/bin/env python
import ast
import collections
import sys, os, pprint
import itertools
Import = collections.namedtuple("Import", ["module", "name", "alias","level","lineno"])

dirs=sys.argv[1:]

def list_all_py_files(directory):
    return [os.path.relpath(os.path.join(dp, f),directory) for dp, dn, filenames in os.walk(directory) for f in filenames if f.endswith(".py")]

def get_imports(path):
    with open(path) as fh:        
       root = ast.parse(fh.read(), path)

    for node in ast.walk(root):
        if isinstance(node, ast.Import):
            module = []
        elif isinstance(node, ast.ImportFrom):
            if node.module is None:
                module=node.module
            else:
                module = node.module.split('.')
        else:
            continue

        for n in node.names:
            yield Import(module, n.name.split('.'), n.asname,node.level if isinstance(node, ast.ImportFrom) else 0,n.lineno)

def get_module_name(Import,directory):
    module=None
    if Import.level>0:
        module=None #Relative import
    else:
        #Absolute import
        if Import.module==[]:
            module=Import.name[0]
        else:
            module=Import.module[0]
        
        if module in sys.stdlib_module_names:
            module=None #Module is in stdlib, so there's no reason to add them
        
        if module==os.path.basename(directory):
            module=None #Module is the same as the global module, so will just lead to recursive behavior
    return module

def get_first_line_of_file(path):
    line=None
    with open(path) as fh:        
       root = ast.parse(fh.read(), path)
    for node in ast.iter_child_nodes(root): #This is just to make sure that no imports come before __future__imports
        if isinstance(node, ast.ImportFrom) and node.module=="__future__":
            line=node.end_lineno+1
    
    if not line:
        for node in ast.iter_child_nodes(root):
            line=node.lineno
            break
    return line
        
def comment_file(path,directory):
    import_string=""
    modules={}
    for Import in get_imports(path):
        modules[get_module_name(Import,directory)]=None
    for module in modules:
        if module:
            import_string+=f"# < include '{module}.py' >\n\n"
    with open(path,"r") as f:
        data=f.readlines()
        if len(modules)!=0:
            data.insert(get_first_line_of_file(path)-1,import_string)
    with open(path,"w") as f:
        f.writelines(data)
        
for _ in dirs:
    if os.path.isfile(_):
        comment_file(_,_)
    for file in list_all_py_files(_):
        comment_file(os.path.join(_,file),_)
