#!/usr/bin/env python

import os, sys, zipfile
imported_module_path=sys.argv[1]

def convert_path_to_key(path):
    #return '["'+path.replace('/','"]["')+'"]'
    return '["'+path.replace("\\","\\\\")+'"]'
module_files = [os.path.relpath(os.path.join(dp, f),os.path.dirname(imported_module_path)) for dp, dn, filenames in os.walk(imported_module_path) for f in filenames if f.endswith(".py")]

module_name=os.path.basename(os.path.normpath(imported_module_path))
if len(sys.argv)>2:
    exported_file_path=sys.argv[2]
else:
    exported_file_path=module_name+".py"

importer_template="""
import os
import types
import zipfile
import sys
import io

class ZipImporter(object):
    def __init__(self, zip_file):
        self.zfile = zip_file
        self._paths = [x.filename for x in self.zfile.filelist]
        
    def _mod_to_paths(self, fullname):
        # get the python module name
        py_filename = fullname.replace(".", os.sep) + ".py"
        # get the filename if it is a package/subpackage
        py_package = fullname.replace(".", os.sep) + "/__init__.py"
        if py_filename in self._paths:
            return py_filename
        elif py_package in self._paths:
            return py_package
        else:
            return None

    def find_module(self, fullname, path):
        if self._mod_to_paths(fullname) is not None:
            return self
        return None

    def load_module(self, fullname):
        filename = self._mod_to_paths(fullname)
        if not filename in self._paths:
            raise ImportError(fullname)
        new_module = types.ModuleType(fullname)
        sys.modules[fullname]=new_module
        if filename.endswith("__init__.py"):
            new_module.__path__ = [] 
            new_module.__package__ = fullname
        else:
            new_module.__package__ = fullname.rpartition('.')[0]
        exec(self.zfile.open(filename, 'r').read(),new_module.__dict__)
        new_module.__file__ = filename
        new_module.__loader__ = self
        return new_module

module_zip=zipfile.ZipFile(io.BytesIO(),"w")
for key in module_dict:
    module_zip.writestr(key,module_dict[key])

module_importer=ZipImporter(module_zip)
sys.meta_path.insert(0,module_importer)

from {a} import *

sys.meta_path.remove(module_importer)

for key in sys.modules.copy():
    if key=="{a}" or key.startswith("{a}."):
        del sys.modules[key]
"""

with open(exported_file_path,"w+") as f:
    f.write("module_dict={}\n")
    for path in module_files:
        with open(os.path.join(os.path.dirname(imported_module_path),path),"r") as file_in_module:
            file_in_module_content=file_in_module.read().replace("\\","\\\\").replace('\"', r'\"')
            f.write(f"module_dict{convert_path_to_key(path)}=\"\"\"\n{file_in_module_content}\n\"\"\"\n")
    
    f.write(importer_template.format(a=module_name))
    